/*******************************************************************************
 * This file is part of RoCaWeb.
 * 
 *  RoCaWeb is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>
 ******************************************************************************/
package com.rocaweb.learning.algorithms.statistical;

import com.rocaweb.learning.data.statistical.ALengthStatistics;
import com.rocaweb.learning.rules.Contract;
import com.rocaweb.learning.rules.Statistic;

/**
 * Determines the mean and standard deviation for a set of sequences and creates
 * a <code>LengthStatistics</code> type for a parameter represented by a list of
 * sequences.
 * 
 * 
 * The goal of this model is to approximate the actual but unknown distribution
 * of the parameters lengths and detect instances that significantly deviate
 * from the observed normal behavior.
 * 
 * <h3>Hypothesis of the model</h3>
 * 
 * <ul>
 * <li>The parameters are either fixed sized tokens or derived from human input.
 * </li>
 * <li>The length of the parameters value does not vary much between the
 * requests</li>
 * </ul>
 * 
 * 
 * <h3>Learning phase</h3> Determine the mean (mu) and the variance (sigma) of
 * the lengths of the parameters values.
 * 
 * 
 * <h3>Detection phase</h3> : Given the mean, the variance and the length of the
 * current parameter, To asses the anomaly of the given value, the method
 * determines the distances of the current length to the mean.
 * 
 * This distance is expressed by the Chebychev inequality :
 * 
 * p(|x - mu| > t) > sigma^2/t^2 (1)
 * 
 * Where t in R^+.
 * 
 *
 * In the equation (1), t is replaced by l - mu, therefore the equation (1)
 * became :
 * 
 * 
 * p(|x - mu| > |l - mu|) > sigma^2/(l - mu)^2
 * 
 * 
 * p(l) = { 1 if l < mu else p(l) = sigma^2/(l - mu)^2}
 * 
 * <h3>Remarks :</h3>
 * 
 * <ul>
 * <li>Only strings with length that exceed mu are assumed to be malicious</li>
 * <li>The model can detect attacks which pad the string</li>
 * <li>The bound computed by the Chebychev inequality is weak therefore, it
 * results a high degree of tolerance to deviation from the attribute length
 * given empirical mean and variance. This is useful to flag only significant
 * outliers.</li>
 * </ul>
 * 
 * 
 * @see https://en.wikipedia.org/wiki/Chebyshev's_inequality
 * @see Kruegel, C., Vigna, G., & Robertson, W. (2005). A multi-model approach
 *      to the detection of web-based attacks. Computer Networks, 48(5),
 *      717-738.}.
 * 
 * 
 * @author Djibrilla Amadou Kountche
 * @since 1.0.0
 * 
 */

public class AttributeLength extends AbstractLengthAlgorithm<ALengthStatistics> {

	/**
	 * The contract generated by this algorithm.
	 */
	private transient Statistic<ALengthStatistics> contract = null;

	/**
	 * Creates an instance given a configuration file
	 * 
	 * @param configFileName
	 */
	public AttributeLength(String configFileName) {
		super(configFileName);
	}

	/**
	 * Default constructor
	 */
	public AttributeLength() {

	}

	@Override
	public Contract<ALengthStatistics> getContract() {
		if (contract == null) {
			contract = new Statistic<ALengthStatistics>(this);

		}

		return contract;
	}

	/**
	 * @see com.rocaweb.learning.algorithms.statistical.AbstractLengthAlgorithm#create(double,
	 *      double)
	 */
	@Override
	protected ALengthStatistics create(double mean, double std) {
		ALengthStatistics al = new ALengthStatistics(mean, std);

		return al;
	}

	public double determineTreshold() {
		return LengthUtils.determineBestThreshold(getSequences());
	}

	/**
	 * @see com.rocaweb.learning.algorithms.statistical.AbstractLengthAlgorithm#getLengthStatistics()
	 */
	@Override
	public ALengthStatistics getLengthStatistics() {
		ALengthStatistics al = this.calculateMeanAndStd(getSequences());
		al.setTreshold((LengthUtils.determineBestThreshold(getSequences())) * 1.1);
		return al;
	}

}
